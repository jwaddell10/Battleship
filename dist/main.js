(()=>{"use strict";class s{constructor(s,t,i,e,h){this.length=s,this.numberOfHits=t,this.isSunk=i,this.x=e,this.y=h}shipWasHit(){return this.numberOfHits++,console.log(this.numberOfHits,"this is the # of hits"),this.numberOfHits}shipWasSunk(){return this.numberOfHits===this.length?(console.log(s,"this ship is sunk"),this.isSunk=!0):(console.log(s,"this ship is not sunk"),this.isSunk=!1),this.isSunk}}const t=new s(4,0,!1,[4,0]);console.log(t,"this is hsip1");const i=s;const e=[],h=new i(4,0,!1,4,0),o=new i(4,0,!1,3,1),n=new i(3,0,!1,5,9);e.push(h,o,n),console.log(e,"this is the array of ships");const l=[],r=new class{constructor(){this.board=this.createBoard()}createBoard(){let s=[];for(let t=0;t<10;t++){s[t]=[];for(let i=0;i<10;i++)s[t][i]="."}return s}placeShips(s){s.forEach((s=>{this.board[s.x][s.y]=s}))}receiveAttack(s,t,i){let e=!1;s.forEach((s=>{this.board[t][i]===this.board[s.x][s.y]&&(s.shipWasHit(),s.shipWasSunk(s),e=!0)})),e||(l.push(t,i),console.log(l,"this is missed shots"))}allShipsSunk(s){let t=!1;const i=s.filter((s=>!0===s.shipWasSunk()));if(console.log(i,"this is the result"),i.length!==s.length)console.log("shisp are up"),t=!1;else if(i.length===s.length)return console.log("did it do anything"),t=!0,console.log(t,"this should change"),t}};r.placeShips(e),r.receiveAttack(e,4,0),r.receiveAttack(e,4,0),r.receiveAttack(e,4,0),r.allShipsSunk(e)})();