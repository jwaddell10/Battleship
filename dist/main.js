(()=>{"use strict";class s{constructor(s,t,i,e,h){this.length=s,this.numberOfHits=t,this.isSunk=i,this.x=e,this.y=h}shipWasHit(){return this.numberOfHits++,console.log(this.numberOfHits,"this is the # of hits"),this.numberOfHits}shipWasSunk(){return this.numberOfHits===this.length?(console.log(s,"this ship is sunk"),this.isSunk=!0):(console.log(s,"this ship is not sunk"),this.isSunk=!1),this.isSunk}}const t=[],i=new s(4,0,!1,4,0),e=new s(4,0,!1,3,1),h=new s(3,0,!1,5,9);t.push(i,e,h);const n=new class{constructor(){this.board=this.createBoard()}createBoard(){let s=[];for(let t=0;t<10;t++){s[t]=[];for(let i=0;i<10;i++)s[t][i]="."}return s}placeShips(s){s.forEach((s=>{this.board[s.x][s.y]=s}))}receiveAttack(s,t,i){console.log("attack received at"[t][i]);const e=[];let h=!1;s.forEach((s=>{this.board[t][i]===this.board[s.x][s.y]&&(s.shipWasHit(),s.shipWasSunk(s),h=!0)})),h||(e.push(t,i),console.log(e,"this is missed shots"))}allShipsSunk(s){let t=!1;const i=s.filter((s=>!0===s.shipWasSunk()));return i.length!==s.length?(t=!1,t):i.length===s.length?(t=!0,t):void 0}};n.placeShips(t),(new class{constructor(s){this.player=s}checkAttack(s,t){(s<0||s>10||t<0||t>10)&&console.log("invalid attack")}sendAttack(s,t){this.checkAttack();let i=n.board[s][t];console.log(i,"this spot was attacked")}}).sendAttack(-1,0)})();