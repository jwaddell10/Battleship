(()=>{"use strict";class s{constructor(s,t,i,e,o){this.length=s,this.numberOfHits=t,this.isSunk=i,this.x=e,this.y=o}shipWasHit(){return this.numberOfHits++,console.log(this.numberOfHits,"this is the # of hits"),this.numberOfHits}shipWasSunk(s){return this.numberOfHits===this.length?(console.log(s,"this ship is sunk"),!0):(console.log(s,"this ship is not sunk"),!1)}}const t=new s(4,0,!1,[4,0]);console.log(t,"this is hsip1");const i=s;const e=[],o=new i(4,0,!1,4,0),h=new i(4,0,!1,3,1),n=new i(3,0,!1,5,9);e.push(o,h,n),console.log(e,"this is the array of ships");const r=[],c=new class{constructor(){this.board=this.createBoard()}createBoard(){let s=[];for(let t=0;t<10;t++){s[t]=[];for(let i=0;i<10;i++)s[t][i]="."}return s}placeShips(s){s.forEach((s=>{this.board[s.x][s.y]=s}))}receiveAttack(s,t,i){let e=!1;s.forEach((s=>{this.board[t][i]===this.board[s.x][s.y]&&(s.shipWasHit(),s.shipWasSunk(s),e=!0)})),e||r.push(t,i)}addMissedShots(){if(!0!==receiveAttack)return r;console.log("the ship was hit")}allShipsSunk(){}};console.log(c,"this is gameboard1"),c.placeShips(e),c.receiveAttack(e,4,1),console.log(r,"this is missedshots")})();